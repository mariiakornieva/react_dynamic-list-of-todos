{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","title","filterOptions","currentOptionIdx","isRandom","handleChange","e","target","name","value","setState","handleRandomize","shuffleTodos","todos","map","todo","sortKey","Math","random","sort","a","b","filterTodos","props","filter","match","RegExp","completed","this","onSelectUser","modifiedTodos","className","type","onChange","placeholder","option","idx","key","onClick","id","cn","readOnly","checked","userId","React","Component","defaultProps","request","url","fetch","then","response","ok","Error","status","statusText","json","data","getUser","CurrentUser","user","loadData","prevProps","onClearUser","email","phone","App","selectedUserId","handleSelectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2771e3b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    title: '',\n    filterOptions: [\n      'All',\n      'Active',\n      'Completed',\n    ],\n    currentOptionIdx: 0,\n    isRandom: false,\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleRandomize = () => {\n    this.setState(state => ({\n      isRandom: !state.isRandom,\n    }));\n  };\n\n  shuffleTodos = todos => (\n    todos.map(todo => ({\n      sortKey: Math.random(),\n      value: todo,\n    }))\n      .sort((a, b) => a.sortKey - b.sortKey)\n      .map(todo => todo.value)\n  );\n\n  filterTodos = () => {\n    const {\n      title, filterOptions, currentOptionIdx,\n    } = this.state;\n\n    return this.props.todos.filter(todo => (\n      todo.title && todo.title.match(new RegExp(title, 'i'))\n    ))\n      .filter((todo) => {\n        switch (filterOptions[currentOptionIdx]) {\n          case 'Completed':\n            return todo.completed;\n          case 'Active':\n            return !todo.completed;\n          default:\n            return true;\n        }\n      });\n  };\n\n  render() {\n    const {\n      title, filterOptions, currentOptionIdx, isRandom,\n    } = this.state;\n    const { onSelectUser } = this.props;\n\n    let modifiedTodos = this.filterTodos();\n\n    if (isRandom) {\n      modifiedTodos = this.shuffleTodos(modifiedTodos);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <div className=\"TodoList__list-filter\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              value={title}\n              onChange={this.handleChange}\n              placeholder=\"Title\"\n            />\n\n            <select\n              name=\"currentOptionIdx\"\n              value={currentOptionIdx}\n              onChange={this.handleChange}\n            >\n              {filterOptions.map((option, idx) => (\n                <option\n                  key={option}\n                  value={idx}\n                >\n                  {option}\n                </option>\n              ))}\n            </select>\n\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={this.handleRandomize}\n            >\n              {isRandom ? 'Original order' : 'Randomize'}\n            </button>\n          </div>\n\n          <ul className=\"TodoList__list\">\n            {modifiedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={cn('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={cn(\n                    'TodoList__user-button',\n                    'TodoList__user-button--selected',\n                    'button',\n                  )}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      userId: PropTypes.number,\n      completed: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ),\n  onSelectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n};\n","const API_URL = 'https://mate-api.herokuapp.com';\n\nfunction request(url) {\n  return fetch(`${API_URL}${url}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} --- ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n    .then(json => json.data);\n}\n\nexport function getTodos() {\n  return request('/todos');\n}\n\nexport function getUsers() {\n  return request('/users');\n}\n\nexport function getUser(id) {\n  return request(`/users/${id}`);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  loadData = async() => {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { onClearUser } = this.props;\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              type=\"button\"\n              className=\"button CurrentUser__clear\"\n              onClick={onClearUser}\n            >\n              Clear\n            </button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onClearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  handleSelectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectUser={this.handleSelectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUser={() => this.handleSelectUser(0)}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}